import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:todo_app/bloc/task_bloc.dart';
import 'package:todo_app/bloc/task_event.dart';
import 'package:todo_app/bloc/task_state.dart';
import 'package:todo_app/widget/task_widget.dart';
import '../model/task_model.dart';
import '../utils/task_shared_preference.dart';
import 'create_task_widget.dart';

class Home extends StatefulWidget {
  const Home({Key? key}) : super(key: key);

  @override
  State<Home> createState() => _HomeState();
}

class _HomeState extends State<Home> {
  @override
  Widget build(BuildContext context) {
    return BlocProvider(lazy: true,
        create: (BuildContext context) => TaskBloc(),
        child: WillPopScope(
            onWillPop: () async {
              // Prevent the Home page from being popped.
              return false;
            },
            child: Scaffold(
              appBar: AppBar(
                title: Text('TO-DO LIST'),
                centerTitle: true,
              ),
              body: FutureBuilder<List<Map<String, Task>>>(
                  future: TaskPreference.getAllTask(),
                  builder: (BuildContext context,
                      AsyncSnapshot<List<Map<String, Task>>> snapshot) {
                    TaskStatus _status = TaskStatus.success;
                    context.read<TaskBloc>().add(TaskStarted());
                    // (snapshot.connectionState == ConnectionState.waiting)
                    //     ? (_status = TaskStatus.loading)
                    //     : ((snapshot.hasError)
                    //         ? (_status = TaskStatus.error)
                    //         : (_status = TaskStatus.success));
                    if (snapshot.connectionState == ConnectionState.waiting) {
                      _status = TaskStatus.loading;
                      return CircularProgressIndicator();
                    } else {
                      if (snapshot.hasError) {
                        _status = TaskStatus.error;
                        return Center(
                          child: Text(
                            '${snapshot.error} occurred',
                            style: const TextStyle(fontSize: 18),
                          ),
                        );
                      } else {
                        _status = TaskStatus.success;
                        List<Map<String, Task>>? listTasks = snapshot.data;
                        print(listTasks!.length);
                        context.read<TaskBloc>().add(TaskStarted());
                        return
                          BlocBuilder<TaskBloc, TaskState>(
                          bloc: TaskBloc(TaskState().copyWith(status: TaskStatus.success,tasks: listTasks)),
                          builder: (context, state) {
                            context.read<TaskBloc>().add(TaskStarted());
                            state.copyWith(status: TaskStatus.success);
                            state.copyWith(tasks: listTasks);
                            print(state.tasks.length);
                            (state.tasks.length > 0)
                                ? state.copyWith(status: TaskStatus.success)
                                : state;
                            state.copyWith(status: TaskStatus.success);
                            print(state.status);
                            if (state.status == TaskStatus.success) {
                              // Use your TaskWidget here based on the state
                              return ListView.builder(
                                itemCount: state.tasks.length,
                                itemBuilder: (context, index) {
                                  Task _task = state.tasks[index].values.first!;
                                  String _keyTask =
                                      state.tasks[index].keys.first!;
                                  return TaskWidget(
                                    task: _task,
                                    keyTask: _keyTask,
                                  );
                                },
                              );
                            } else if (state.status == TaskStatus.loading) {
                              return Center(child: CircularProgressIndicator());
                            } else if (state.status == TaskStatus.error) {
                              return Center(
                                child: Text(
                                  'An error occurred',
                                  style: TextStyle(fontSize: 18),
                                ),
                              );
                            }
                            else {
                              return Container();
                            }
                          },
                        );
                      }
                    }
                  }),
              floatingActionButton: ElevatedButton(
                onPressed: () => showDialog(
                  context: context,
                  builder: (context) {
                    return CreateTask();
                  },
                ),
                child: Container(
                  decoration:
                      BoxDecoration(borderRadius: BorderRadius.circular(20)),
                  width: 100,
                  height: 50,
                  child: Row(
                    crossAxisAlignment: CrossAxisAlignment.center,
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [Text('Add To-do'), Icon(Icons.add_task)],
                  ),
                ),
              ),
            )));
  }
}
